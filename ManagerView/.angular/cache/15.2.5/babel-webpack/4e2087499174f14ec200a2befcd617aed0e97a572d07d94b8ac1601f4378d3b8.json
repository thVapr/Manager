{"ast":null,"code":"import { catchError } from 'rxjs/operators/catchError';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared\";\nimport * as i2 from \"@angular/router\";\nexport class ProfileResolver {\n  constructor(profilesService, router) {\n    this.profilesService = profilesService;\n    this.router = router;\n  }\n  resolve(route, state) {\n    return this.profilesService.get(route.params['username']).pipe(catchError(err => this.router.navigateByUrl('/')));\n  }\n}\nProfileResolver.ɵfac = function ProfileResolver_Factory(t) {\n  return new (t || ProfileResolver)(i0.ɵɵinject(i1.ProfilesService), i0.ɵɵinject(i2.Router));\n};\nProfileResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileResolver,\n  factory: ProfileResolver.ɵfac\n});","map":{"version":3,"mappings":"AAKA,SAASA,UAAU,QAAQ,2BAA2B;;;;AAGtD,OAAM,MAAOC,eAAe;EAC1BC,YACUC,eAAgC,EAChCC,MAAc;IADd,oBAAe,GAAfD,eAAe;IACf,WAAM,GAANC,MAAM;EACb;EAEHC,OAAO,CACLC,KAA6B,EAC7BC,KAA0B;IAG1B,OAAO,IAAI,CAACJ,eAAe,CAACK,GAAG,CAACF,KAAK,CAACG,MAAM,CAAC,UAAU,CAAC,CAAC,CACtDC,IAAI,CAACV,UAAU,CAAEW,GAAG,IAAK,IAAI,CAACP,MAAM,CAACQ,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;EAE9D;;AAdWX,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["catchError","ProfileResolver","constructor","profilesService","router","resolve","route","state","get","params","pipe","err","navigateByUrl","factory"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\profile\\profile-resolver.service.ts"],"sourcesContent":["import { Injectable, } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Profile, ProfilesService } from '../shared';\nimport { catchError } from 'rxjs/operators/catchError';\n\n@Injectable()\nexport class ProfileResolver implements Resolve<Profile> {\n  constructor(\n    private profilesService: ProfilesService,\n    private router: Router\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<any> {\n\n    return this.profilesService.get(route.params['username'])\n      .pipe(catchError((err) => this.router.navigateByUrl('/')));\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}