{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators/map';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nexport class ArticlesService {\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  query(config) {\n    // Convert any filters over to Angular's URLSearchParams\n    const params = {};\n    Object.keys(config.filters).forEach(key => {\n      params[key] = config.filters[key];\n    });\n    return this.apiService.get('/articles' + (config.type === 'feed' ? '/feed' : ''), new HttpParams(params));\n  }\n  get(slug) {\n    return this.apiService.get('/articles/' + slug).pipe(map(data => data.article));\n  }\n  destroy(slug) {\n    return this.apiService.delete('/articles/' + slug);\n  }\n  save(article) {\n    // If we're updating an existing article\n    if (article.slug) {\n      return this.apiService.put('/articles/' + article.slug, {\n        article: article\n      }).pipe(map(data => data.article));\n      // Otherwise, create a new article\n    } else {\n      return this.apiService.post('/articles/', {\n        article: article\n      }).pipe(map(data => data.article));\n    }\n  }\n  favorite(slug) {\n    return this.apiService.post('/articles/' + slug + '/favorite');\n  }\n  unfavorite(slug) {\n    return this.apiService.delete('/articles/' + slug + '/favorite');\n  }\n}\nArticlesService.ɵfac = function ArticlesService_Factory(t) {\n  return new (t || ArticlesService)(i0.ɵɵinject(i1.ApiService));\n};\nArticlesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ArticlesService,\n  factory: ArticlesService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,sBAAsB;AAKjD,SAASC,GAAG,QAAQ,oBAAoB;;;AAGxC,OAAM,MAAOC,eAAe;EAC1BC,YACUC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EACjB;EAEHC,KAAK,CAACC,MAAyB;IAC7B;IACA,MAAMC,MAAM,GAAG,EAAE;IAEjBC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC,CAC1BC,OAAO,CAAEC,GAAG,IAAI;MACfL,MAAM,CAACK,GAAG,CAAC,GAAGN,MAAM,CAACI,OAAO,CAACE,GAAG,CAAC;IACnC,CAAC,CAAC;IAEF,OAAO,IAAI,CAACR,UAAU,CACrBS,GAAG,CACF,WAAW,IAAKP,MAAM,CAACQ,IAAI,KAAK,MAAM,GAAI,OAAO,GAAG,EAAE,CAAC,EACvD,IAAId,UAAU,CAACO,MAAM,CAAC,CACvB;EACH;EAEAM,GAAG,CAACE,IAAI;IACN,OAAO,IAAI,CAACX,UAAU,CAACS,GAAG,CAAC,YAAY,GAAGE,IAAI,CAAC,CAC5CC,IAAI,CAACf,GAAG,CAACgB,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,CAAC;EACpC;EAEAC,OAAO,CAACJ,IAAI;IACV,OAAO,IAAI,CAACX,UAAU,CAACgB,MAAM,CAAC,YAAY,GAAGL,IAAI,CAAC;EACpD;EAEAM,IAAI,CAACH,OAAO;IACV;IACA,IAAIA,OAAO,CAACH,IAAI,EAAE;MAChB,OAAO,IAAI,CAACX,UAAU,CAACkB,GAAG,CAAC,YAAY,GAAGJ,OAAO,CAACH,IAAI,EAAE;QAACG,OAAO,EAAEA;MAAO,CAAC,CAAC,CACxEF,IAAI,CAACf,GAAG,CAACgB,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,CAAC;MAEpC;KACC,MAAM;MACL,OAAO,IAAI,CAACd,UAAU,CAACmB,IAAI,CAAC,YAAY,EAAE;QAACL,OAAO,EAAEA;MAAO,CAAC,CAAC,CAC1DF,IAAI,CAACf,GAAG,CAACgB,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,CAAC;;EAEtC;EAEAM,QAAQ,CAACT,IAAI;IACX,OAAO,IAAI,CAACX,UAAU,CAACmB,IAAI,CAAC,YAAY,GAAGR,IAAI,GAAG,WAAW,CAAC;EAChE;EAEAU,UAAU,CAACV,IAAI;IACb,OAAO,IAAI,CAACX,UAAU,CAACgB,MAAM,CAAC,YAAY,GAAGL,IAAI,GAAG,WAAW,CAAC;EAClE;;AAjDWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAwB,SAAfxB,eAAe;AAAA","names":["HttpParams","map","ArticlesService","constructor","apiService","query","config","params","Object","keys","filters","forEach","key","get","type","slug","pipe","data","article","destroy","delete","save","put","post","favorite","unfavorite","factory"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\shared\\services\\articles.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ApiService } from './api.service';\nimport { Article, ArticleListConfig } from '../models';\nimport { map } from 'rxjs/operators/map';\n\n@Injectable()\nexport class ArticlesService {\n  constructor (\n    private apiService: ApiService\n  ) {}\n\n  query(config: ArticleListConfig): Observable<{articles: Article[], articlesCount: number}> {\n    // Convert any filters over to Angular's URLSearchParams\n    const params = {};\n\n    Object.keys(config.filters)\n    .forEach((key) => {\n      params[key] = config.filters[key];\n    });\n\n    return this.apiService\n    .get(\n      '/articles' + ((config.type === 'feed') ? '/feed' : ''),\n      new HttpParams(params)\n    );\n  }\n\n  get(slug): Observable<Article> {\n    return this.apiService.get('/articles/' + slug)\n      .pipe(map(data => data.article));\n  }\n\n  destroy(slug) {\n    return this.apiService.delete('/articles/' + slug);\n  }\n\n  save(article): Observable<Article> {\n    // If we're updating an existing article\n    if (article.slug) {\n      return this.apiService.put('/articles/' + article.slug, {article: article})\n        .pipe(map(data => data.article));\n\n    // Otherwise, create a new article\n    } else {\n      return this.apiService.post('/articles/', {article: article})\n        .pipe(map(data => data.article));\n    }\n  }\n\n  favorite(slug): Observable<Article> {\n    return this.apiService.post('/articles/' + slug + '/favorite');\n  }\n\n  unfavorite(slug): Observable<Article> {\n    return this.apiService.delete('/articles/' + slug + '/favorite');\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}