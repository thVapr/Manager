{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet RegistrationComponent = class RegistrationComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.registerForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', Validators.required)\n    }, {\n      validators: this.passwordsMatchValidator\n    });\n  }\n  passwordsMatchValidator(form) {\n    const password = form.get('password');\n    const confirmPassword = form.get('confirmPassword');\n    return password && confirmPassword && password.value === confirmPassword.value ? null : {\n      passwordsNotMatch: true\n    };\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    const {\n      email,\n      password\n    } = this.registerForm.value;\n    this.authService.register(email, password).subscribe(() => {\n      console.log('Registration successful');\n      // TODO: Redirect to login page\n    }, error => {\n      console.error('Registration failed', error);\n      // TODO: Display error message\n    });\n  }\n};\n\nRegistrationComponent = __decorate([Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})], RegistrationComponent);\nexport { RegistrationComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAO5D,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAQhCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAN/B,iBAAY,GAAG,IAAIL,SAAS,CAAC;MAC3BM,KAAK,EAAE,IAAIL,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACK,QAAQ,EAAEL,UAAU,CAACI,KAAK,CAAC,CAAC;MACnEE,QAAQ,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACK,QAAQ,EAAEL,UAAU,CAACO,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7EC,eAAe,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACK,QAAQ;KACzD,EAAE;MAAEI,UAAU,EAAE,IAAI,CAACC;IAAuB,CAAE,CAAC;EAED;EAE/CA,uBAAuB,CAACC,IAAe;IACrC,MAAML,QAAQ,GAAGK,IAAI,CAACC,GAAG,CAAC,UAAU,CAAC;IACrC,MAAMJ,eAAe,GAAGG,IAAI,CAACC,GAAG,CAAC,iBAAiB,CAAC;IACnD,OAAON,QAAQ,IAAIE,eAAe,IAAIF,QAAQ,CAACO,KAAK,KAAKL,eAAe,CAACK,KAAK,GAAG,IAAI,GAAG;MAAEC,iBAAiB,EAAE;IAAI,CAAE;EACrH;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACC,YAAY,CAACC,OAAO,EAAE;MAC7B;;IAGF,MAAM;MAAEb,KAAK;MAAEE;IAAQ,CAAE,GAAG,IAAI,CAACU,YAAY,CAACH,KAAK;IACnD,IAAI,CAACV,WAAW,CAACe,QAAQ,CAACd,KAAK,EAAEE,QAAQ,CAAC,CAACa,SAAS,CAClD,MAAK;MACHC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC;IACF,CAAC,EACDC,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C;IACF,CAAC,CACF;EACH;CACD;;AAjCYrB,qBAAqB,eALjCJ,SAAS,CAAC;EACT0B,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWxB,qBAAqB,CAiCjC;SAjCYA,qBAAqB","names":["Component","FormGroup","FormControl","Validators","RegistrationComponent","constructor","authService","email","required","password","minLength","confirmPassword","validators","passwordsMatchValidator","form","get","value","passwordsNotMatch","onSubmit","registerForm","invalid","register","subscribe","console","log","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\registration\\registration\\registration.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent {\n  \n  registerForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n    confirmPassword: new FormControl('', Validators.required),\n  }, { validators: this.passwordsMatchValidator });\n\n  constructor(private authService: AuthService) {}\n\n  passwordsMatchValidator(form: FormGroup) {\n    const password = form.get('password');\n    const confirmPassword = form.get('confirmPassword');\n    return password && confirmPassword && password.value === confirmPassword.value ? null : { passwordsNotMatch: true };\n  }\n\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    const { email, password } = this.registerForm.value;\n    this.authService.register(email, password).subscribe(\n      () => {\n        console.log('Registration successful');\n        // TODO: Redirect to login page\n      },\n      error => {\n        console.error('Registration failed', error);\n        // TODO: Display error message\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}