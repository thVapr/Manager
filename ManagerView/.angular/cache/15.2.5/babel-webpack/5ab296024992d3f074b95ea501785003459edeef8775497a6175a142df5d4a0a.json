{"ast":null,"code":"import { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { map } from 'rxjs/operators/map';\nimport { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./jwt.service\";\nexport class UserService {\n  constructor(apiService, http, jwtService) {\n    this.apiService = apiService;\n    this.http = http;\n    this.jwtService = jwtService;\n    this.currentUserSubject = new BehaviorSubject({});\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticatedSubject = new ReplaySubject(1);\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n  }\n  // Verify JWT in localstorage with server & load user's info.\n  // This runs once on application startup.\n  populate() {\n    // If JWT detected, attempt to get & store user's info\n    if (this.jwtService.getToken()) {\n      this.apiService.get('/user').subscribe(data => this.setAuth(data.user), err => this.purgeAuth());\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n  setAuth(user) {\n    // Save JWT sent from server in localstorage\n    this.jwtService.saveToken(user.token);\n    // Set current user data into observable\n    this.currentUserSubject.next(user);\n    // Set isAuthenticated to true\n    this.isAuthenticatedSubject.next(true);\n  }\n  purgeAuth() {\n    // Remove JWT from localstorage\n    this.jwtService.destroyToken();\n    // Set current user to an empty object\n    this.currentUserSubject.next({});\n    // Set auth status to false\n    this.isAuthenticatedSubject.next(false);\n  }\n  attemptAuth(type, credentials) {\n    const route = type === 'login' ? '/login' : '';\n    return this.apiService.post('/users' + route, {\n      user: credentials\n    }).pipe(map(data => {\n      this.setAuth(data.user);\n      return data;\n    }));\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  // Update the user on the server (email, pass, etc)\n  update(user) {\n    return this.apiService.put('/user', {\n      user\n    }).pipe(map(data => {\n      // Update the currentUser observable\n      this.currentUserSubject.next(data.user);\n      return data.user;\n    }));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.JwtService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAQ,sBAAsB;AACtD,SAASC,aAAa,QAAQ,oBAAoB;AAKlD,SAASC,GAAG,QAAQ,oBAAoB;AACxC,SAASC,oBAAoB,QAAQ,qCAAqC;;;;;AAI1E,OAAM,MAAOC,WAAW;EAOtBC,YACUC,UAAsB,EACtBC,IAAgB,EAChBC,UAAsB;IAFtB,eAAU,GAAVF,UAAU;IACV,SAAI,GAAJC,IAAI;IACJ,eAAU,GAAVC,UAAU;IATZ,uBAAkB,GAAG,IAAIR,eAAe,CAAO,EAAU,CAAC;IAC3D,gBAAW,GAAG,IAAI,CAACS,kBAAkB,CAACC,YAAY,EAAE,CAACC,IAAI,CAACR,oBAAoB,EAAE,CAAC;IAEhF,2BAAsB,GAAG,IAAIF,aAAa,CAAU,CAAC,CAAC;IACvD,oBAAe,GAAG,IAAI,CAACW,sBAAsB,CAACF,YAAY,EAAE;EAMhE;EAEH;EACA;EACAG,QAAQ;IACN;IACA,IAAI,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE,EAAE;MAC9B,IAAI,CAACR,UAAU,CAACS,GAAG,CAAC,OAAO,CAAC,CAC3BC,SAAS,CACRC,IAAI,IAAI,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,IAAI,CAAC,EAC/BC,GAAG,IAAI,IAAI,CAACC,SAAS,EAAE,CACxB;KACF,MAAM;MACL;MACA,IAAI,CAACA,SAAS,EAAE;;EAEpB;EAEAH,OAAO,CAACC,IAAU;IAChB;IACA,IAAI,CAACX,UAAU,CAACc,SAAS,CAACH,IAAI,CAACI,KAAK,CAAC;IACrC;IACA,IAAI,CAACd,kBAAkB,CAACe,IAAI,CAACL,IAAI,CAAC;IAClC;IACA,IAAI,CAACP,sBAAsB,CAACY,IAAI,CAAC,IAAI,CAAC;EACxC;EAEAH,SAAS;IACP;IACA,IAAI,CAACb,UAAU,CAACiB,YAAY,EAAE;IAC9B;IACA,IAAI,CAAChB,kBAAkB,CAACe,IAAI,CAAC,EAAU,CAAC;IACxC;IACA,IAAI,CAACZ,sBAAsB,CAACY,IAAI,CAAC,KAAK,CAAC;EACzC;EAEAE,WAAW,CAACC,IAAI,EAAEC,WAAW;IAC3B,MAAMC,KAAK,GAAIF,IAAI,KAAK,OAAO,GAAI,QAAQ,GAAG,EAAE;IAChD,OAAO,IAAI,CAACrB,UAAU,CAACwB,IAAI,CAAC,QAAQ,GAAGD,KAAK,EAAE;MAACV,IAAI,EAAES;IAAW,CAAC,CAAC,CAC/DjB,IAAI,CAACT,GAAG,CACTe,IAAI,IAAG;MACL,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,IAAI,CAAC;MACvB,OAAOF,IAAI;IACb,CAAC,CACF,CAAC;EACJ;EAEAc,cAAc;IACZ,OAAO,IAAI,CAACtB,kBAAkB,CAACuB,KAAK;EACtC;EAEA;EACAC,MAAM,CAACd,IAAI;IACT,OAAO,IAAI,CAACb,UAAU,CACrB4B,GAAG,CAAC,OAAO,EAAE;MAAEf;IAAI,CAAE,CAAC,CACtBR,IAAI,CAACT,GAAG,CAACe,IAAI,IAAG;MACf;MACA,IAAI,CAACR,kBAAkB,CAACe,IAAI,CAACP,IAAI,CAACE,IAAI,CAAC;MACvC,OAAOF,IAAI,CAACE,IAAI;IAClB,CAAC,CAAC,CAAC;EACL;;AAvEWf,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;AAAA","names":["BehaviorSubject","ReplaySubject","map","distinctUntilChanged","UserService","constructor","apiService","http","jwtService","currentUserSubject","asObservable","pipe","isAuthenticatedSubject","populate","getToken","get","subscribe","data","setAuth","user","err","purgeAuth","saveToken","token","next","destroyToken","attemptAuth","type","credentials","route","post","getCurrentUser","value","update","put","factory"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\shared\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\nimport { ApiService } from './api.service';\nimport { JwtService } from './jwt.service';\nimport { User } from '../models';\nimport { map } from 'rxjs/operators/map';\nimport { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';\n\n\n@Injectable()\nexport class UserService {\n  private currentUserSubject = new BehaviorSubject<User>({} as User);\n  public currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n\n  private isAuthenticatedSubject = new ReplaySubject<boolean>(1);\n  public isAuthenticated = this.isAuthenticatedSubject.asObservable();\n\n  constructor (\n    private apiService: ApiService,\n    private http: HttpClient,\n    private jwtService: JwtService\n  ) {}\n\n  // Verify JWT in localstorage with server & load user's info.\n  // This runs once on application startup.\n  populate() {\n    // If JWT detected, attempt to get & store user's info\n    if (this.jwtService.getToken()) {\n      this.apiService.get('/user')\n      .subscribe(\n        data => this.setAuth(data.user),\n        err => this.purgeAuth()\n      );\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n\n  setAuth(user: User) {\n    // Save JWT sent from server in localstorage\n    this.jwtService.saveToken(user.token);\n    // Set current user data into observable\n    this.currentUserSubject.next(user);\n    // Set isAuthenticated to true\n    this.isAuthenticatedSubject.next(true);\n  }\n\n  purgeAuth() {\n    // Remove JWT from localstorage\n    this.jwtService.destroyToken();\n    // Set current user to an empty object\n    this.currentUserSubject.next({} as User);\n    // Set auth status to false\n    this.isAuthenticatedSubject.next(false);\n  }\n\n  attemptAuth(type, credentials): Observable<User> {\n    const route = (type === 'login') ? '/login' : '';\n    return this.apiService.post('/users' + route, {user: credentials})\n      .pipe(map(\n      data => {\n        this.setAuth(data.user);\n        return data;\n      }\n    ));\n  }\n\n  getCurrentUser(): User {\n    return this.currentUserSubject.value;\n  }\n\n  // Update the user on the server (email, pass, etc)\n  update(user): Observable<User> {\n    return this.apiService\n    .put('/user', { user })\n    .pipe(map(data => {\n      // Update the currentUser observable\n      this.currentUserSubject.next(data.user);\n      return data.user;\n    }));\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}