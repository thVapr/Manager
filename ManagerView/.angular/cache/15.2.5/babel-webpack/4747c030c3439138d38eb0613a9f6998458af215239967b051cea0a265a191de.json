{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../shared/list-errors.component\";\nfunction EditorComponent_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 15)(1, \"i\", 16);\n    i0.ɵɵlistener(\"click\", function EditorComponent_span_17_Template_i_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const tag_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeTag(tag_r1));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tag_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", tag_r1, \" \");\n  }\n}\nexport class EditorComponent {\n  constructor(articlesService, route, router, fb) {\n    this.articlesService = articlesService;\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.article = {};\n    this.tagField = new FormControl();\n    this.errors = {};\n    this.isSubmitting = false;\n    // use the FormBuilder to create a form group\n    this.articleForm = this.fb.group({\n      title: '',\n      description: '',\n      body: ''\n    });\n    // Optional: subscribe to value changes on the form\n    // this.articleForm.valueChanges.subscribe(value => this.updateArticle(value));\n  }\n\n  ngOnInit() {\n    // If there's an article prefetched, load it\n    this.route.data.subscribe(data => {\n      if (data.article) {\n        this.article = data.article;\n        this.articleForm.patchValue(data.article);\n      }\n    });\n  }\n  addTag() {\n    // retrieve tag control\n    const tag = this.tagField.value;\n    // only add tag if it does not exist yet\n    if (this.article.tagList.indexOf(tag) < 0) {\n      this.article.tagList.push(tag);\n    }\n    // clear the input\n    this.tagField.reset('');\n  }\n  removeTag(tagName) {\n    this.article.tagList = this.article.tagList.filter(tag => tag !== tagName);\n  }\n  submitForm() {\n    this.isSubmitting = true;\n    // update the model\n    this.updateArticle(this.articleForm.value);\n    // post the changes\n    this.articlesService.save(this.article).subscribe(article => this.router.navigateByUrl('/article/' + article.slug), err => {\n      this.errors = err;\n      this.isSubmitting = false;\n    });\n  }\n  updateArticle(values) {\n    Object.assign(this.article, values);\n  }\n}\nEditorComponent.ɵfac = function EditorComponent_Factory(t) {\n  return new (t || EditorComponent)(i0.ɵɵdirectiveInject(i1.ArticlesService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nEditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditorComponent,\n  selectors: [[\"app-editor-page\"]],\n  decls: 20,\n  vars: 5,\n  consts: [[1, \"editor-page\"], [1, \"container\", \"page\"], [1, \"row\"], [1, \"col-md-10\", \"offset-md-1\", \"col-xs-12\"], [3, \"errors\"], [3, \"formGroup\"], [3, \"disabled\"], [1, \"form-group\"], [\"formControlName\", \"title\", \"type\", \"text\", \"placeholder\", \"Article Title\", 1, \"form-control\", \"form-control-lg\"], [\"formControlName\", \"description\", \"type\", \"text\", \"placeholder\", \"What's this article about?\", 1, \"form-control\"], [\"formControlName\", \"body\", \"rows\", \"8\", \"placeholder\", \"Write your article (in markdown)\", 1, \"form-control\"], [\"type\", \"text\", \"placeholder\", \"Enter tags\", 1, \"form-control\", 3, \"formControl\", \"keyup.enter\"], [1, \"tag-list\"], [\"class\", \"tag-default tag-pill\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-lg\", \"pull-xs-right\", \"btn-primary\", 3, \"click\"], [1, \"tag-default\", \"tag-pill\"], [1, \"ion-close-round\", 3, \"click\"]],\n  template: function EditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"app-list-errors\", 4);\n      i0.ɵɵelementStart(5, \"form\", 5)(6, \"fieldset\", 6)(7, \"fieldset\", 7);\n      i0.ɵɵelement(8, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"fieldset\", 7);\n      i0.ɵɵelement(10, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"fieldset\", 7)(12, \"textarea\", 10);\n      i0.ɵɵtext(13, \"              \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"fieldset\", 7)(15, \"input\", 11);\n      i0.ɵɵlistener(\"keyup.enter\", function EditorComponent_Template_input_keyup_enter_15_listener() {\n        return ctx.addTag();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 12);\n      i0.ɵɵtemplate(17, EditorComponent_span_17_Template, 3, 1, \"span\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function EditorComponent_Template_button_click_18_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵtext(19, \" Publish Article \");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"errors\", ctx.errors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.articleForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.isSubmitting);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formControl\", ctx.tagField);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.article.tagList);\n    }\n  },\n  dependencies: [i4.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormControlDirective, i3.FormGroupDirective, i3.FormControlName, i5.ListErrorsComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["FormControl","i0","EditorComponent","constructor","articlesService","route","router","fb","articleForm","group","title","description","body","ngOnInit","data","subscribe","article","patchValue","addTag","tag","tagField","value","tagList","indexOf","push","reset","removeTag","tagName","filter","submitForm","isSubmitting","updateArticle","save","navigateByUrl","slug","err","errors","values","Object","assign","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\editor\\editor.component.ts","C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\editor\\editor.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Article, ArticlesService } from '../shared';\n\n@Component({\n  selector: 'app-editor-page',\n  templateUrl: './editor.component.html'\n})\nexport class EditorComponent implements OnInit {\n  article: Article = {} as Article;\n  articleForm: FormGroup;\n  tagField = new FormControl();\n  errors: Object = {};\n  isSubmitting = false;\n\n  constructor(\n    private articlesService: ArticlesService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private fb: FormBuilder\n  ) {\n    // use the FormBuilder to create a form group\n    this.articleForm = this.fb.group({\n      title: '',\n      description: '',\n      body: '',\n    });\n    // Optional: subscribe to value changes on the form\n    // this.articleForm.valueChanges.subscribe(value => this.updateArticle(value));\n  }\n\n  ngOnInit() {\n    // If there's an article prefetched, load it\n    this.route.data.subscribe(\n      (data: {article: Article}) => {\n        if (data.article) {\n          this.article = data.article;\n          this.articleForm.patchValue(data.article);\n        }\n      }\n    );\n  }\n\n  addTag() {\n    // retrieve tag control\n    const tag = this.tagField.value;\n    // only add tag if it does not exist yet\n    if (this.article.tagList.indexOf(tag) < 0) {\n      this.article.tagList.push(tag);\n    }\n    // clear the input\n    this.tagField.reset('');\n  }\n\n  removeTag(tagName: string) {\n    this.article.tagList = this.article.tagList.filter((tag) => tag !== tagName);\n  }\n\n  submitForm() {\n    this.isSubmitting = true;\n\n    // update the model\n    this.updateArticle(this.articleForm.value);\n\n    // post the changes\n    this.articlesService\n    .save(this.article)\n    .subscribe(\n      article => this.router.navigateByUrl('/article/' + article.slug),\n      err => {\n        this.errors = err;\n        this.isSubmitting = false;\n      }\n    );\n  }\n\n  updateArticle(values: Object) {\n    Object.assign(this.article, values);\n  }\n}\n","<div class=\"editor-page\">\n  <div class=\"container page\">\n    <div class=\"row\">\n      <div class=\"col-md-10 offset-md-1 col-xs-12\">\n\n        <app-list-errors [errors]=\"errors\"></app-list-errors>\n\n        <form [formGroup]=\"articleForm\">\n          <fieldset [disabled]=\"isSubmitting\">\n\n            <fieldset class=\"form-group\">\n              <input class=\"form-control form-control-lg\"\n                formControlName=\"title\"\n                type=\"text\"\n                placeholder=\"Article Title\" />\n            </fieldset>\n\n            <fieldset class=\"form-group\">\n              <input class=\"form-control\"\n                formControlName=\"description\"\n                type=\"text\"\n                placeholder=\"What's this article about?\" />\n            </fieldset>\n\n            <fieldset class=\"form-group\">\n              <textarea class=\"form-control\"\n                formControlName=\"body\"\n                rows=\"8\"\n                placeholder=\"Write your article (in markdown)\">\n              </textarea>\n            </fieldset>\n\n            <fieldset class=\"form-group\">\n              <input class=\"form-control\"\n                type=\"text\"\n                placeholder=\"Enter tags\"\n                [formControl]=\"tagField\"\n                (keyup.enter)=\"addTag()\" />\n\n              <div class=\"tag-list\">\n                <span *ngFor=\"let tag of article.tagList\"\n                  class=\"tag-default tag-pill\">\n                  <i class=\"ion-close-round\" (click)=\"removeTag(tag)\"></i>\n                  {{ tag }}\n                </span>\n              </div>\n            </fieldset>\n\n            <button class=\"btn btn-lg pull-xs-right btn-primary\" type=\"button\" (click)=\"submitForm()\">\n              Publish Article\n            </button>\n\n          </fieldset>\n        </form>\n\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}