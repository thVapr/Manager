{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth/auth.service\";\nimport * as i2 from \"@angular/forms\";\nexport class RegistrationComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.registerForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', Validators.required)\n    }, this.passwordsMatchValidator);\n  }\n  passwordsMatchValidator(control) {\n    const password = control.get('password');\n    const confirmPassword = control.get('confirmPassword');\n    if (password && confirmPassword && password.value !== confirmPassword.value) {\n      return {\n        passwordsNotMatch: true\n      };\n    }\n    return null;\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    const {\n      email,\n      password\n    } = this.registerForm.value;\n    if (email != null && password != null) {\n      this.authService.register(email, password).subscribe(() => {\n        console.log('Registration successful');\n        // TODO: Redirect to login page\n      }, error => {\n        console.error('Registration failed', error);\n        // TODO: Display error message\n      });\n    }\n  }\n}\n\nRegistrationComponent.ɵfac = function RegistrationComponent_Factory(t) {\n  return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nRegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationComponent,\n  selectors: [[\"app-registration\"]],\n  decls: 8,\n  vars: 1,\n  consts: [[\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"email\", \"placeholder\", \"Email\"], [\"formControlName\", \"password\", \"placeholder\", \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\"], [\"formControlName\", \"confirmPassword\", \"placeholder\", \"\\u041F\\u043E\\u0432\\u0442\\u043E\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"], [\"type\", \"submit\"]],\n  template: function RegistrationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegistrationComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit;\n      });\n      i0.ɵɵelement(3, \"input\", 1)(4, \"input\", 2)(5, \"input\", 3);\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵtext(7, \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAGA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;;;AAOnE,OAAM,MAAOC,qBAAqB;EAQhCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAN/B,iBAAY,GAAG,IAAIL,SAAS,CAAC;MAC3BM,KAAK,EAAE,IAAIL,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACK,QAAQ,EAAEL,UAAU,CAACI,KAAK,CAAC,CAAC;MACnEE,QAAQ,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACK,QAAQ,EAAEL,UAAU,CAACO,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7EC,eAAe,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACK,QAAQ;KACzD,EAAE,IAAI,CAACI,uBAAuB,CAAC;EAEe;EAE/CA,uBAAuB,CAACC,OAAwB;IAC9C,MAAMJ,QAAQ,GAAGI,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACxC,MAAMH,eAAe,GAAGE,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAEtD,IAAIL,QAAQ,IAAIE,eAAe,IAAIF,QAAQ,CAACM,KAAK,KAAKJ,eAAe,CAACI,KAAK,EAAE;MAC3E,OAAO;QAAEC,iBAAiB,EAAE;MAAI,CAAE;;IAGpC,OAAO,IAAI;EACb;EAGAC,QAAQ;IACN,IAAI,IAAI,CAACC,YAAY,CAACC,OAAO,EAAE;MAC7B;;IAGF,MAAM;MAAEZ,KAAK;MAAEE;IAAQ,CAAE,GAAG,IAAI,CAACS,YAAY,CAACH,KAAK;IAEnD,IAAIR,KAAK,IAAI,IAAI,IAAIE,QAAQ,IAAI,IAAI,EAAE;MACnC,IAAI,CAACH,WAAW,CAACc,QAAQ,CAACb,KAAK,EAAEE,QAAQ,CAAC,CAACY,SAAS,CAClD,MAAK;QACHC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC;MACF,CAAC,EACDC,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C;MACF,CAAC,CACF;;EAGP;;;AA1CWpB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVlCC,0BAAI;MAAAA,kFAAW;MAAAA,iBAAK;MAEpBA,+BAAkE;MAAjCA;QAAA;MAAA,EAAqB;MAClDA,2BAAmD;MAGnDA,iCAAsB;MAAAA,4HAAkB;MAAAA,iBAAS;;;MAJ/CA,eAA0B;MAA1BA,4CAA0B","names":["FormGroup","FormControl","Validators","RegistrationComponent","constructor","authService","email","required","password","minLength","confirmPassword","passwordsMatchValidator","control","get","value","passwordsNotMatch","onSubmit","registerForm","invalid","register","subscribe","console","log","error","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\registration\\registration\\registration.component.ts","C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\registration\\registration\\registration.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { AbstractControl } from '@angular/forms';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent {\n  \n  registerForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n    confirmPassword: new FormControl('', Validators.required),\n  }, this.passwordsMatchValidator);\n\n  constructor(private authService: AuthService) {}\n\n  passwordsMatchValidator(control: AbstractControl): { [key: string]: boolean } | null {\n    const password = control.get('password');\n    const confirmPassword = control.get('confirmPassword');\n  \n    if (password && confirmPassword && password.value !== confirmPassword.value) {\n      return { passwordsNotMatch: true };\n    }\n  \n    return null;\n  }\n  \n\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    const { email, password } = this.registerForm.value;\n\n    if (email != null && password != null) {\n        this.authService.register(email, password).subscribe(\n          () => {\n            console.log('Registration successful');\n            // TODO: Redirect to login page\n          },\n          error => {\n            console.error('Registration failed', error);\n            // TODO: Display error message\n          }\n        );\n    }\n\n  }\n}\n","<h1>Регистрация</h1>\n\n<form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit\" novalidate>\n    <input formControlName=\"email\" placeholder=\"Email\">\n    <input formControlName=\"password\" placeholder=\"Пароль\">\n    <input formControlName=\"confirmPassword\" placeholder=\"Повторите пароль\">\n    <button type=\"submit\">Зарегистрироваться</button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}