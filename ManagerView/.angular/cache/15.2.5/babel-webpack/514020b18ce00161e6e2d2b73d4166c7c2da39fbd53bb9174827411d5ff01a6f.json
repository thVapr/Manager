{"ast":null,"code":"import { map } from 'rxjs/operators/map';\nimport { take } from 'rxjs/operators/take';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../shared\";\nexport class NoAuthGuard {\n  constructor(router, userService) {\n    this.router = router;\n    this.userService = userService;\n  }\n  canActivate(route, state) {\n    return this.userService.isAuthenticated.pipe(take(1), map(isAuth => !isAuth));\n  }\n}\nNoAuthGuard.ɵfac = function NoAuthGuard_Factory(t) {\n  return new (t || NoAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.UserService));\n};\nNoAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NoAuthGuard,\n  factory: NoAuthGuard.ɵfac\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,oBAAoB;AACxC,SAASC,IAAI,QAAQ,qBAAqB;;;;AAG1C,OAAM,MAAOC,WAAW;EACtBC,YACUC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;EAClB;EAEHC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAG1B,OAAO,IAAI,CAACH,WAAW,CAACI,eAAe,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,EAAED,GAAG,CAACW,MAAM,IAAI,CAACA,MAAM,CAAC,CAAC;EAE/E;;AAbWT,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAU,SAAXV,WAAW;AAAA","names":["map","take","NoAuthGuard","constructor","router","userService","canActivate","route","state","isAuthenticated","pipe","isAuth","factory"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\auth\\no-auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { UserService } from '../shared';\nimport { map } from 'rxjs/operators/map';\nimport { take } from 'rxjs/operators/take';\n\n@Injectable()\nexport class NoAuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private userService: UserService\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n\n    return this.userService.isAuthenticated.pipe(take(1), map(isAuth => !isAuth));\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}