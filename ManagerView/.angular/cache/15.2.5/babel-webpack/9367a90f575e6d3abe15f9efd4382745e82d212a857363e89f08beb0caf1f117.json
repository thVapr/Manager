{"ast":null,"code":"import { catchError, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class TokenInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const accessToken = this.authService.getAccessToken();\n    if (accessToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 401) {\n        return this.authService.refresh().pipe(switchMap(tokens => {\n          this.authService.setAccessToken(tokens.item1);\n          this.authService.setRefreshToken(tokens.item2);\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${tokens.access_token}`\n            }\n          });\n          return next.handle(request);\n        }), catchError(err => {\n          return throwError(err);\n        }));\n      } else {\n        return throwError(error);\n      }\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,EAAEC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;AAGxD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,cAAc,EAAE;IACrD,IAAID,WAAW,EAAE;MACfF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,WAAW;;OAEvC,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9Bf,UAAU,CAAEgB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,OAAO,IAAI,CAACZ,WAAW,CAACa,OAAO,EAAE,CAACH,IAAI,CACpCd,SAAS,CAAEkB,MAAW,IAAI;UACxB,IAAI,CAACd,WAAW,CAACe,cAAc,CAACD,MAAM,CAACE,KAAK,CAAC;UAC7C,IAAI,CAAChB,WAAW,CAACiB,eAAe,CAACH,MAAM,CAACI,KAAK,CAAC;UAE9ChB,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;YACtBC,UAAU,EAAE;cACVC,aAAa,EAAE,UAAUM,MAAM,CAACK,YAAY;;WAE/C,CAAC;UACF,OAAOhB,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;QAC7B,CAAC,CAAC,EACFP,UAAU,CAAEyB,GAAG,IAAI;UACjB,OAAOvB,UAAU,CAACuB,GAAG,CAAC;QACxB,CAAC,CAAC,CACH;OACF,MAAM;QACL,OAAOvB,UAAU,CAACc,KAAK,CAAC;;IAE5B,CAAC,CAAC,CACH;EACH;;AArCWb,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAuB,SAAhBvB,gBAAgB;AAAA","names":["catchError","switchMap","throwError","TokenInterceptor","constructor","authService","intercept","request","next","accessToken","getAccessToken","clone","setHeaders","Authorization","handle","pipe","error","status","refresh","tokens","setAccessToken","item1","setRefreshToken","item2","access_token","err","factory"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\auth\\token.intercept.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\r\nimport { AuthService } from './auth.service';\r\nimport { catchError, switchMap, throwError } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\r\n    const accessToken = this.authService.getAccessToken();\r\n    if (accessToken) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      });\r\n    }\r\n    return next.handle(request).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        if (error.status === 401) {\r\n          return this.authService.refresh().pipe(\r\n            switchMap((tokens: any) => {\r\n              this.authService.setAccessToken(tokens.item1);\r\n              this.authService.setRefreshToken(tokens.item2);\r\n\r\n              request = request.clone({\r\n                setHeaders: {\r\n                  Authorization: `Bearer ${tokens.access_token}`\r\n                }\r\n              });\r\n              return next.handle(request);\r\n            }),\r\n            catchError((err) => {\r\n              return throwError(err);\r\n            })\r\n          );\r\n        } else {\r\n          return throwError(error);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}