{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class TokenInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const accessToken = this.authService.getAccessToken();\n    console.log(accessToken);\n    if (accessToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAKA,OAAM,MAAOA,gBAAgB;EAE3BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,cAAc,EAAE;IACrDC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;IACxB,IAAIA,WAAW,EAAE;MACfF,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUN,WAAW;;OAEvC,CAAC;;IAEJ,OAAOD,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;EAC7B;;AAfWJ,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAc,SAAhBd,gBAAgB;AAAA","names":["TokenInterceptor","constructor","authService","intercept","request","next","accessToken","getAccessToken","console","log","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\auth\\token.intercept.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\r\n    const accessToken = this.authService.getAccessToken();\r\n    console.log(accessToken);\r\n    if (accessToken) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      });\r\n    }\r\n    return next.handle(request);\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}