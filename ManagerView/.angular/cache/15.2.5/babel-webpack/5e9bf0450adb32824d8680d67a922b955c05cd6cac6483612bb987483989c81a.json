{"ast":null,"code":"import { HTTP_INTERCEPTORS, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { EventData } from '../_shared/event.class';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/storage.service\";\nimport * as i2 from \"../_shared/event-bus.service\";\nexport class HttpRequestInterceptor {\n  constructor(storageService, eventBusService) {\n    this.storageService = storageService;\n    this.eventBusService = eventBusService;\n    this.isRefreshing = false;\n  }\n  intercept(req, next) {\n    req = req.clone({\n      withCredentials: true\n    });\n    return next.handle(req).pipe(catchError(error => {\n      if (error instanceof HttpErrorResponse && !req.url.includes('auth/signin') && error.status === 401) {\n        return this.handle401Error(req, next);\n      }\n      return throwError(() => error);\n    }));\n  }\n  handle401Error(request, next) {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n      if (this.storageService.isLoggedIn()) {\n        this.eventBusService.emit(new EventData('logout', null));\n      }\n    }\n    return next.handle(request);\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.EventBusService));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});\nexport const httpInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: HttpRequestInterceptor,\n  multi: true\n}];","map":{"version":3,"mappings":"AACA,SAA+DA,iBAAiB,EAAEC,iBAAiB,QAAQ,sBAAsB;AACjI,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAI3C,SAASC,SAAS,QAAQ,wBAAwB;;;;AAGlD,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,cAA8B,EAAUC,eAAgC;IAAxE,mBAAc,GAAdD,cAAc;IAA0B,oBAAe,GAAfC,eAAe;IAFnE,iBAAY,GAAG,KAAK;EAEoE;EAEhGC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChDD,GAAG,GAAGA,GAAG,CAACE,KAAK,CAAC;MACdC,eAAe,EAAE;KAClB,CAAC;IAEF,OAAOF,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC,CAACK,IAAI,CAC1BZ,UAAU,CAAEa,KAAK,IAAI;MACnB,IACEA,KAAK,YAAYf,iBAAiB,IAClC,CAACS,GAAG,CAACO,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,IAChCF,KAAK,CAACG,MAAM,KAAK,GAAG,EACpB;QACA,OAAO,IAAI,CAACC,cAAc,CAACV,GAAG,EAAEC,IAAI,CAAC;;MAGvC,OAAOT,UAAU,CAAC,MAAMc,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEQI,cAAc,CAACC,OAAyB,EAAEV,IAAiB;IACjE,IAAI,CAAC,IAAI,CAACW,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAG,IAAI;MAExB,IAAI,IAAI,CAACf,cAAc,CAACgB,UAAU,EAAE,EAAE;QACpC,IAAI,CAACf,eAAe,CAACgB,IAAI,CAAC,IAAIpB,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;;IAI5D,OAAOO,IAAI,CAACG,MAAM,CAACO,OAAO,CAAC;EAC7B;;AAnCWhB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAoB,SAAtBpB,sBAAsB;AAAA;AAsCnC,OAAO,MAAMqB,wBAAwB,GAAG,CACtC;EAAEC,OAAO,EAAE3B,iBAAiB;EAAE4B,QAAQ,EAAEvB,sBAAsB;EAAEwB,KAAK,EAAE;AAAI,CAAE,CAC9E","names":["HTTP_INTERCEPTORS","HttpErrorResponse","throwError","catchError","EventData","HttpRequestInterceptor","constructor","storageService","eventBusService","intercept","req","next","clone","withCredentials","handle","pipe","error","url","includes","status","handle401Error","request","isRefreshing","isLoggedIn","emit","factory","httpInterceptorProviders","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\_helpers\\http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HTTP_INTERCEPTORS, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { StorageService } from '../_services/storage.service';\nimport { EventBusService } from '../_shared/event-bus.service';\nimport { EventData } from '../_shared/event.class';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  private isRefreshing = false;\n\n  constructor(private storageService: StorageService, private eventBusService: EventBusService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    req = req.clone({\n      withCredentials: true,\n    });\n\n    return next.handle(req).pipe(\n      catchError((error) => {\n        if (\n          error instanceof HttpErrorResponse &&\n          !req.url.includes('auth/signin') &&\n          error.status === 401\n        ) {\n          return this.handle401Error(req, next);\n        }\n\n        return throwError(() => error);\n      })\n    );\n  }\n\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n\n      if (this.storageService.isLoggedIn()) {\n        this.eventBusService.emit(new EventData('logout', null));\n      }\n    }\n\n    return next.handle(request);\n  }\n}\n\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: HttpRequestInterceptor, multi: true },\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}