{"ast":null,"code":"import { tap } from 'rxjs';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5106/api/authentication';\n  }\n  getData() {\n    return this.http.get(`${this.apiUrl}/data`);\n  }\n  register(email, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      const {\n        item1,\n        item2\n      } = response;\n      localStorage.setItem('access_token', item1);\n      localStorage.setItem('refresh_token', item2);\n    }));\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      const {\n        item1,\n        item2\n      } = response;\n      localStorage.setItem('access_token', item1);\n      localStorage.setItem('refresh_token', item2);\n    }));\n  }\n  getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n  getTokenExpiration() {\n    const token = this.getAccessToken();\n    if (!token) {\n      return new Date(0);\n    }\n    const tokenData = jwt_decode(token);\n    const expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(tokenData.exp);\n    return expirationDate;\n  }\n  refresh() {\n    const accessToken = this.getAccessToken();\n    const refreshToken = this.getRefreshToken();\n    return this.http.post(`${this.apiUrl}/refresh`, {\n      accessToken,\n      refreshToken\n    }).pipe(tap(response => {\n      const {\n        item1,\n        item2\n      } = response;\n      localStorage.setItem('access_token', item1);\n      localStorage.setItem('refresh_token', item2);\n    }));\n  }\n  logout() {\n    const refreshToken = localStorage.getItem('refresh_token');\n    this.http.post(`${this.apiUrl}/logout`, {\n      refreshToken\n    });\n    //localStorage.removeItem('access_token');\n    //localStorage.removeItem('refresh_token');\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["tap","jwt_decode","AuthService","constructor","http","getData","get","apiUrl","register","email","password","post","pipe","response","item1","item2","localStorage","setItem","login","getAccessToken","getItem","getRefreshToken","getTokenExpiration","token","Date","tokenData","expirationDate","setUTCSeconds","exp","refresh","accessToken","refreshToken","logout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\n\nimport jwt_decode from 'jwt-decode'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5106/api/authentication';\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/data`);\n  }\n\n  register(email: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register`, { email, password }).pipe(\n      tap(response => {\n        const { item1, item2 } = response;\n        localStorage.setItem('access_token', item1);\n        localStorage.setItem('refresh_token', item2);\n      })\n    );\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, { email, password}).pipe(\n      tap(response => {\n        const {item1, item2} = response;\n        localStorage.setItem('access_token', item1);\n        localStorage.setItem('refresh_token', item2);\n      })\n    );\n  }\n\n  getAccessToken(): string | null {\n    return localStorage.getItem('access_token');\n  }\n\n  getRefreshToken(): string | null {\n    return localStorage.getItem('refresh_token');\n  }\n\n  getTokenExpiration(): Date {\n    const token = this.getAccessToken();\n\n    if (!token) {\n      return new Date(0);\n    }\n  \n    const tokenData = jwt_decode(token) as any;\n    const expirationDate = new Date(0);\n\n    expirationDate.setUTCSeconds(tokenData.exp);\n    \n    return expirationDate;\n  }\n  \n  refresh() {\n    const accessToken = this.getAccessToken();\n    const refreshToken = this.getRefreshToken();\n\n    return this.http.post<any>(`${this.apiUrl}/refresh`, { accessToken, refreshToken }).pipe(\n      tap(response => {\n        const {item1, item2} = response;\n        localStorage.setItem('access_token', item1);\n        localStorage.setItem('refresh_token', item2);\n      })\n    );\n  }\n\n  logout() {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    this.http.post<any>(`${this.apiUrl}/logout`, {refreshToken});\n    \n    //localStorage.removeItem('access_token');\n    //localStorage.removeItem('refresh_token');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}