{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nexport class HttpTokenInterceptor {\n  constructor(jwtService) {\n    this.jwtService = jwtService;\n  }\n  intercept(req, next) {\n    const headersConfig = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n    const token = this.jwtService.getToken();\n    if (token) {\n      headersConfig['Authorization'] = `Token ${token}`;\n    }\n    const request = req.clone({\n      setHeaders: headersConfig\n    });\n    return next.handle(request);\n  }\n}\nHttpTokenInterceptor.ɵfac = function HttpTokenInterceptor_Factory(t) {\n  return new (t || HttpTokenInterceptor)(i0.ɵɵinject(i1.JwtService));\n};\nHttpTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpTokenInterceptor,\n  factory: HttpTokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,oBAAoB;EAC/BC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAe;EAE7CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,aAAa,GAAG;MACpB,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;KACX;IAED,MAAMC,KAAK,GAAG,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE;IAExC,IAAID,KAAK,EAAE;MACTD,aAAa,CAAC,eAAe,CAAC,GAAG,SAASC,KAAK,EAAE;;IAGnD,MAAME,OAAO,GAAGL,GAAG,CAACM,KAAK,CAAC;MAAEC,UAAU,EAAEL;IAAa,CAAE,CAAC;IACxD,OAAOD,IAAI,CAACO,MAAM,CAACH,OAAO,CAAC;EAC7B;;AAjBWT,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAa,SAApBb,oBAAoB;AAAA","names":["HttpTokenInterceptor","constructor","jwtService","intercept","req","next","headersConfig","token","getToken","request","clone","setHeaders","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\shared\\interceptors\\http.token.interceptor.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { JwtService } from '../services';\n\n@Injectable()\nexport class HttpTokenInterceptor implements HttpInterceptor {\n  constructor(private jwtService: JwtService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const headersConfig = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n\n    const token = this.jwtService.getToken();\n\n    if (token) {\n      headersConfig['Authorization'] = `Token ${token}`;\n    }\n    \n    const request = req.clone({ setHeaders: headersConfig });\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}