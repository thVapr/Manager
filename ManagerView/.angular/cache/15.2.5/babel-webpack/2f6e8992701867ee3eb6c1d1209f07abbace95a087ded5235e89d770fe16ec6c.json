{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../shared\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../shared/list-errors.component\";\nconst _c0 = function () {\n  return [\"/login\"];\n};\nfunction AuthComponent_a_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵtext(1, \"Have an account?\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\nconst _c1 = function () {\n  return [\"/register\"];\n};\nfunction AuthComponent_a_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵtext(1, \"Need an account?\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c1));\n  }\n}\nfunction AuthComponent_input_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 15);\n  }\n}\nexport class AuthComponent {\n  constructor(route, router, userService, fb) {\n    this.route = route;\n    this.router = router;\n    this.userService = userService;\n    this.fb = fb;\n    this.authType = '';\n    this.title = '';\n    this.errors = {\n      errors: {}\n    };\n    this.isSubmitting = false;\n    // use FormBuilder to create a form group\n    this.authForm = this.fb.group({\n      'email': ['', Validators.required],\n      'password': ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.route.url.subscribe(data => {\n      // Get the last piece of the URL (it's either 'login' or 'register')\n      this.authType = data[data.length - 1].path;\n      // Set a title for the page accordingly\n      this.title = this.authType === 'login' ? 'Sign in' : 'Sign up';\n      // add form control for username if this is the register page\n      if (this.authType === 'register') {\n        this.authForm.addControl('username', new FormControl());\n      }\n    });\n  }\n  submitForm() {\n    this.isSubmitting = true;\n    this.errors = {\n      errors: {}\n    };\n    const credentials = this.authForm.value;\n    this.userService.attemptAuth(this.authType, credentials).subscribe(data => this.router.navigateByUrl('/'), err => {\n      this.errors = err;\n      this.isSubmitting = false;\n    });\n  }\n}\nAuthComponent.ɵfac = function AuthComponent_Factory(t) {\n  return new (t || AuthComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nAuthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AuthComponent,\n  selectors: [[\"app-auth-page\"]],\n  decls: 20,\n  vars: 9,\n  consts: [[1, \"auth-page\"], [1, \"container\", \"page\"], [1, \"row\"], [1, \"col-md-6\", \"offset-md-3\", \"col-xs-12\"], [1, \"text-xs-center\"], [3, \"routerLink\", 4, \"ngIf\"], [3, \"errors\"], [3, \"formGroup\", \"ngSubmit\"], [3, \"disabled\"], [1, \"form-group\"], [\"formControlName\", \"username\", \"placeholder\", \"Username\", \"class\", \"form-control form-control-lg\", \"type\", \"text\", 4, \"ngIf\"], [\"formControlName\", \"email\", \"placeholder\", \"Email\", \"type\", \"text\", 1, \"form-control\", \"form-control-lg\"], [\"formControlName\", \"password\", \"placeholder\", \"Password\", \"type\", \"password\", 1, \"form-control\", \"form-control-lg\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-primary\", \"pull-xs-right\", 3, \"disabled\"], [3, \"routerLink\"], [\"formControlName\", \"username\", \"placeholder\", \"Username\", \"type\", \"text\", 1, \"form-control\", \"form-control-lg\"]],\n  template: function AuthComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"p\", 4);\n      i0.ɵɵtemplate(7, AuthComponent_a_7_Template, 2, 2, \"a\", 5);\n      i0.ɵɵtemplate(8, AuthComponent_a_8_Template, 2, 2, \"a\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"app-list-errors\", 6);\n      i0.ɵɵelementStart(10, \"form\", 7);\n      i0.ɵɵlistener(\"ngSubmit\", function AuthComponent_Template_form_ngSubmit_10_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(11, \"fieldset\", 8)(12, \"fieldset\", 9);\n      i0.ɵɵtemplate(13, AuthComponent_input_13_Template, 1, 0, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"fieldset\", 9);\n      i0.ɵɵelement(15, \"input\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"fieldset\", 9);\n      i0.ɵɵelement(17, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"button\", 13);\n      i0.ɵɵtext(19);\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.authType == \"register\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.authType == \"login\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"errors\", ctx.errors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.authForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.isSubmitting);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.authType == \"register\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"disabled\", !ctx.authForm.valid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.title, \" \");\n    }\n  },\n  dependencies: [i1.RouterLink, i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.ListErrorsComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["FormControl","Validators","i0","AuthComponent","constructor","route","router","userService","fb","errors","authForm","group","required","ngOnInit","url","subscribe","data","authType","length","path","title","addControl","submitForm","isSubmitting","credentials","value","attemptAuth","navigateByUrl","err","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\auth\\auth.component.ts","C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\auth\\auth.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Errors, UserService } from '../shared';\n\n@Component({\n  selector: 'app-auth-page',\n  templateUrl: './auth.component.html'\n})\nexport class AuthComponent implements OnInit {\n  authType: String = '';\n  title: String = '';\n  errors: Errors = {errors: {}};\n  isSubmitting = false;\n  authForm: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private userService: UserService,\n    private fb: FormBuilder\n  ) {\n    // use FormBuilder to create a form group\n    this.authForm = this.fb.group({\n      'email': ['', Validators.required],\n      'password': ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.route.url.subscribe(data => {\n      // Get the last piece of the URL (it's either 'login' or 'register')\n      this.authType = data[data.length - 1].path;\n      // Set a title for the page accordingly\n      this.title = (this.authType === 'login') ? 'Sign in' : 'Sign up';\n      // add form control for username if this is the register page\n      if (this.authType === 'register') {\n        this.authForm.addControl('username', new FormControl());\n      }\n    });\n  }\n\n  submitForm() {\n    this.isSubmitting = true;\n    this.errors = {errors: {}};\n\n    const credentials = this.authForm.value;\n    this.userService\n    .attemptAuth(this.authType, credentials)\n    .subscribe(\n      data => this.router.navigateByUrl('/'),\n      err => {\n        this.errors = err;\n        this.isSubmitting = false;\n      }\n    );\n  }\n}\n","<div class=\"auth-page\">\n  <div class=\"container page\">\n    <div class=\"row\">\n\n      <div class=\"col-md-6 offset-md-3 col-xs-12\">\n        <h1 class=\"text-xs-center\">{{ title }}</h1>\n        <p class=\"text-xs-center\">\n          <a [routerLink]=\"['/login']\" *ngIf=\"authType == 'register'\">Have an account?</a>\n          <a [routerLink]=\"['/register']\" *ngIf=\"authType == 'login'\">Need an account?</a>\n        </p>\n        <app-list-errors [errors]=\"errors\"></app-list-errors>\n        <form [formGroup]=\"authForm\" (ngSubmit)=\"submitForm()\">\n          <fieldset [disabled]=\"isSubmitting\">\n            <fieldset class=\"form-group\">\n              <input\n                formControlName=\"username\"\n                placeholder=\"Username\"\n                class=\"form-control form-control-lg\"\n                type=\"text\"\n                *ngIf=\"authType == 'register'\" />\n            </fieldset>\n            <fieldset class=\"form-group\">\n              <input\n                formControlName=\"email\"\n                placeholder=\"Email\"\n                class=\"form-control form-control-lg\"\n                type=\"text\" />\n            </fieldset>\n            <fieldset class=\"form-group\">\n              <input\n                formControlName=\"password\"\n                placeholder=\"Password\"\n                class=\"form-control form-control-lg\"\n                type=\"password\" />\n            </fieldset>\n            <button class=\"btn btn-lg btn-primary pull-xs-right\" [disabled]=\"!authForm.valid\" type=\"submit\">\n              {{ title }}\n            </button>\n          </fieldset>\n        </form>\n      </div>\n\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}