{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5106/api/authentication';\n  }\n  getData() {\n    const headers = {\n      Authorization: `Bearer ${this.getAccessToken()}`\n    };\n    return this.http.get(`${this.apiUrl}/data`).subscribe(response => {\n      console.log('Data received:', response);\n    }, error => {\n      console.error('Error occurred:', error);\n    });\n  }\n  register(email, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      const {\n        item1,\n        item2\n      } = response;\n      localStorage.setItem('access_token', item1);\n      localStorage.setItem('refresh_token', item2);\n    }));\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      const {\n        item1,\n        item2\n      } = response;\n      localStorage.setItem('access_token', item1);\n      localStorage.setItem('refresh_token', item2);\n    }));\n  }\n  getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,0CAA0C;EAEpB;EAEvCC,OAAO;IACL,MAAMC,OAAO,GAAG;MACdC,aAAa,EAAE,UAAU,IAAI,CAACC,cAAc,EAAE;KAC/C;IACD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,OAAO,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MAC/DC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;IACzC,CAAC,EAAEG,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACzC,CAAC,CAAC;EACJ;EAEAC,QAAQ,CAACC,KAAa,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAM,GAAG,IAAI,CAACT,MAAM,WAAW,EAAE;MAAEO,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CAC7EnB,GAAG,CAACW,QAAQ,IAAG;MACb,MAAM;QAAES,KAAK;QAAEC;MAAK,CAAE,GAAGV,QAAQ;MACjCW,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,KAAK,CAAC;MAC3CE,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEF,KAAK,CAAC;IAC9C,CAAC,CAAC,CACH;EACH;EAEAG,KAAK,CAACR,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAM,GAAG,IAAI,CAACT,MAAM,QAAQ,EAAE;MAAEO,KAAK;MAAEC;IAAQ,CAAC,CAAC,CAACE,IAAI,CACzEnB,GAAG,CAACW,QAAQ,IAAG;MACb,MAAM;QAACS,KAAK;QAAEC;MAAK,CAAC,GAAGV,QAAQ;MAC/BW,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,KAAK,CAAC;MAC3CE,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEF,KAAK,CAAC;IAC9C,CAAC,CAAC,CACH;EACH;EAEAd,cAAc;IACZ,OAAOe,YAAY,CAACG,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAC,eAAe;IACb,OAAOJ,YAAY,CAACG,OAAO,CAAC,eAAe,CAAC;EAC9C;EAEAE,MAAM;IACJL,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC;IACvCN,YAAY,CAACM,UAAU,CAAC,eAAe,CAAC;EAC1C;;AA/CW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["tap","AuthService","constructor","http","getData","headers","Authorization","getAccessToken","get","apiUrl","subscribe","response","console","log","error","register","email","password","post","pipe","item1","item2","localStorage","setItem","login","getItem","getRefreshToken","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5106/api/authentication';\n\n  constructor(private http: HttpClient) {}\n\n  getData() {\n    const headers = {\n      Authorization: `Bearer ${this.getAccessToken()}`\n    };\n    return this.http.get(`${this.apiUrl}/data`).subscribe(response => {\n      console.log('Data received:', response);\n    }, error => {\n      console.error('Error occurred:', error);\n    });\n  }\n\n  register(email: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register`, { email, password }).pipe(\n      tap(response => {\n        const { item1, item2 } = response;\n        localStorage.setItem('access_token', item1);\n        localStorage.setItem('refresh_token', item2);\n      })\n    );\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, { email, password}).pipe(\n      tap(response => {\n        const {item1, item2} = response;\n        localStorage.setItem('access_token', item1);\n        localStorage.setItem('refresh_token', item2);\n      })\n    );\n  }\n\n  getAccessToken(): string | null {\n    return localStorage.getItem('access_token');\n  }\n\n  getRefreshToken(): string | null {\n    return localStorage.getItem('refresh_token');\n  }\n\n  logout(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}