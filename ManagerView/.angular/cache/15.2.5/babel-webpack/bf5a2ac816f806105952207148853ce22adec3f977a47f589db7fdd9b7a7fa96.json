{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth/auth.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/forms\";\nfunction RegisterComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.getErrorMessage());\n  }\n}\nexport class RegisterComponent {\n  getErrorMessage() {\n    if (this.email.hasError('required')) {\n      return 'Заполните поле';\n    }\n    return this.email.hasError('email') ? \"Не верный формат\" : '';\n  }\n  constructor(authSevice) {\n    this.authSevice = authSevice;\n    this.email = new FormControl('', [Validators.required, Validators.email]);\n    this.password = new FormControl('', [Validators.required]);\n    this.hide = true;\n  }\n  register(email, password) {\n    this.authSevice.register(email, password);\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 15,\n  vars: 6,\n  consts: [[1, \"mb-3\", 3, \"submit\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"placeholder\", \"pat@example.com\", \"required\", \"\", 3, \"formControl\"], [4, \"ngIf\"], [\"matInput\", \"\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"register works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function RegisterComponent_Template_form_submit_2_listener() {\n        return ctx.register;\n      });\n      i0.ɵɵelementStart(3, \"mat-form-field\", 1)(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Enter your email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵtemplate(7, RegisterComponent_mat_error_7_Template, 2, 1, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-form-field\", 1)(9, \"mat-label\");\n      i0.ɵɵtext(10, \"Enter your password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 4);\n      i0.ɵɵelementStart(12, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_12_listener() {\n        return ctx.hide = !ctx.hide;\n      });\n      i0.ɵɵelementStart(13, \"mat-icon\");\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formControl\", ctx.email);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.email.invalid);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hide);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatInput, i4.MatFormField, i4.MatLabel, i4.MatError, i4.MatSuffix, i5.MatIconButton, i6.MatIcon, i7.ɵNgNoValidate, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.RequiredValidator, i7.FormControlDirective],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAQA,WAAW,EAAEC,UAAU,QAAO,gBAAgB;;;;;;;;;;;ICKlDC,iCAAiC;IAAAA,YAAqB;IAAAA,iBAAY;;;;IAAjCA,eAAqB;IAArBA,8CAAqB;;;ADE1D,OAAM,MAAOC,iBAAiB;EAK5BC,eAAe;IACb,IAAI,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;MACnC,OAAO,gBAAgB;;IAGzB,OAAO,IAAI,CAACD,KAAK,CAACC,QAAQ,CAAC,OAAO,CAAC,GAAG,kBAAkB,GAAG,EAAE;EAC/D;EAEAC,YAAoBC,UAAuB;IAAvB,eAAU,GAAVA,UAAU;IAX9B,UAAK,GAAG,IAAIR,WAAW,CAAC,EAAE,EAAC,CAACC,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACI,KAAK,CAAC,CAAC;IACnE,aAAQ,GAAG,IAAIL,WAAW,CAAC,EAAE,EAAC,CAACC,UAAU,CAACQ,QAAQ,CAAC,CAAC;IACpD,SAAI,GAAG,IAAI;EASmC;EAE9CC,QAAQ,CAACL,KAAa,EAAEM,QAAgB;IAEtC,IAAI,CAACH,UAAU,CAACE,QAAQ,CAACL,KAAK,EAAEM,QAAQ,CAAC;EAC3C;;AAlBWR,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAS;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT9Bd,yBAAG;MAAAA,+BAAe;MAAAA,iBAAI;MAEtBA,+BAAuC;MAApBA;QAAA;MAAA,EAAmB;MAEpCA,yCAAkC;MACrBA,gCAAgB;MAAAA,iBAAY;MACvCA,2BAA6E;MAC7EA,8EAAkE;MACpEA,iBAAiB;MAEjBA,yCAAkC;MACrBA,oCAAmB;MAAAA,iBAAY;MAC1CA,4BAAoD;MACpDA,kCAAwH;MAAtFA;QAAA;MAAA,EAAsB;MACtDA,iCAAU;MAAAA,aAA0C;MAAAA,iBAAW;;;MARnBA,eAAqB;MAArBA,uCAAqB;MACvDA,eAAmB;MAAnBA,wCAAmB;MAKfA,eAAmC;MAAnCA,qDAAmC;MACMA,eAAmC;MAAnCA,6CAAmC;MAChFA,eAA0C;MAA1CA,gEAA0C","names":["FormControl","Validators","i0","RegisterComponent","getErrorMessage","email","hasError","constructor","authSevice","required","register","password","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\register\\register.component.ts","C:\\Users\\vaprm\\Projects\\Manager\\ManagerView\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport {FormControl, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent {\n  \n  email = new FormControl('',[Validators.required, Validators.email]);\n  password = new FormControl('',[Validators.required]);\n  hide = true;\n  getErrorMessage() {\n    if (this.email.hasError('required')) {\n      return 'Заполните поле';\n    }\n\n    return this.email.hasError('email') ? \"Не верный формат\" : '';\n  }\n\n  constructor(private authSevice: AuthService) {}\n\n  register(email: string, password: string)\n  {\n    this.authSevice.register(email, password);\n  }\n}\n","<p>register works!</p>\n\n<form class=\"mb-3\" (submit)=\"register\">\n\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your email</mat-label>\n    <input matInput placeholder=\"pat@example.com\" [formControl]=\"email\" required>\n    <mat-error *ngIf=\"email.invalid\">{{getErrorMessage()}}</mat-error>\n  </mat-form-field>\n\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your password</mat-label>\n    <input matInput [type]=\"hide ? 'password' : 'text'\">\n    <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n    </button>\n  </mat-form-field>\n</form>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}