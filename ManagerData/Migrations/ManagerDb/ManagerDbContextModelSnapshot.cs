// <auto-generated />
using System;
using ManagerData.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ManagerData.Migrations.ManagerDb
{
    [DbContext(typeof(ManagerDbContext))]
    partial class ManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ManagerData.DataModels.CompanyDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ManagerData.DataModels.CompanyDepartmentsDataModel", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.HasKey("CompanyId", "DepartmentId");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("CompanyDepartments");
                });

            modelBuilder.Entity("ManagerData.DataModels.DepartmentDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ManagerData.DataModels.DepartmentEmployeesDataModel", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentId", "EmployeeId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("DepartmentEmployees");
                });

            modelBuilder.Entity("ManagerData.DataModels.DepartmentProjectsDataModel", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentId", "ProjectId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("DepartmentProjects");
                });

            modelBuilder.Entity("ManagerData.DataModels.EmployeeDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ManagerData.DataModels.EmployeeTasksDataModel", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("EmployeeId", "TaskId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("EmployeeTasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.ProjectDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ManagerData.DataModels.ProjectEmployeesDataModel", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("ManagerData.DataModels.ProjectTasksDataModel", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.CompanyDepartmentsDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.CompanyDataModel", "Company")
                        .WithMany("CompanyDepartments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.DepartmentDataModel", "Department")
                        .WithOne("CompanyDepartments")
                        .HasForeignKey("ManagerData.DataModels.CompanyDepartmentsDataModel", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ManagerData.DataModels.DepartmentEmployeesDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.DepartmentDataModel", "Department")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.EmployeeDataModel", "Employee")
                        .WithOne("DepartmentEmployees")
                        .HasForeignKey("ManagerData.DataModels.DepartmentEmployeesDataModel", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ManagerData.DataModels.DepartmentProjectsDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.DepartmentDataModel", "Department")
                        .WithMany("DepartmentProjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.ProjectDataModel", "Project")
                        .WithOne("DepartmentProjects")
                        .HasForeignKey("ManagerData.DataModels.DepartmentProjectsDataModel", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ManagerData.DataModels.EmployeeTasksDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.EmployeeDataModel", "Employee")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.TaskDataModel", "Task")
                        .WithOne("EmployeeTasks")
                        .HasForeignKey("ManagerData.DataModels.EmployeeTasksDataModel", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ManagerData.DataModels.ProjectEmployeesDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.EmployeeDataModel", "Employee")
                        .WithOne("ProjectEmployees")
                        .HasForeignKey("ManagerData.DataModels.ProjectEmployeesDataModel", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.ProjectDataModel", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ManagerData.DataModels.ProjectTasksDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.ProjectDataModel", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.TaskDataModel", "Task")
                        .WithOne("ProjectTasks")
                        .HasForeignKey("ManagerData.DataModels.ProjectTasksDataModel", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ManagerData.DataModels.CompanyDataModel", b =>
                {
                    b.Navigation("CompanyDepartments");
                });

            modelBuilder.Entity("ManagerData.DataModels.DepartmentDataModel", b =>
                {
                    b.Navigation("CompanyDepartments");

                    b.Navigation("DepartmentEmployees");

                    b.Navigation("DepartmentProjects");
                });

            modelBuilder.Entity("ManagerData.DataModels.EmployeeDataModel", b =>
                {
                    b.Navigation("DepartmentEmployees");

                    b.Navigation("EmployeeTasks");

                    b.Navigation("ProjectEmployees");
                });

            modelBuilder.Entity("ManagerData.DataModels.ProjectDataModel", b =>
                {
                    b.Navigation("DepartmentProjects");

                    b.Navigation("ProjectEmployees");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskDataModel", b =>
                {
                    b.Navigation("EmployeeTasks")
                        .IsRequired();

                    b.Navigation("ProjectTasks")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
