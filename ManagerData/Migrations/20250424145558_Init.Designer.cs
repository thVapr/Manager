// <auto-generated />
using System;
using ManagerData.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ManagerData.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250424145558_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ManagerData.DataModels.MemberDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ManagerData.DataModels.MemberTasksDataModel", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("MemberId", "TaskId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("MemberTasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartLink", b =>
                {
                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlaveId")
                        .HasColumnType("uuid");

                    b.HasKey("MasterId", "SlaveId");

                    b.HasIndex("SlaveId")
                        .IsUnique();

                    b.ToTable("PartLinks");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartMembersDataModel", b =>
                {
                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Privileges")
                        .HasColumnType("integer");

                    b.HasKey("PartId", "MemberId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("PartMembers");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartTasksDataModel", b =>
                {
                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("PartId", "TaskId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("PartTasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.MemberTasksDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.MemberDataModel", "Member")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.TaskDataModel", "Task")
                        .WithOne("MemberTasks")
                        .HasForeignKey("ManagerData.DataModels.MemberTasksDataModel", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartLink", b =>
                {
                    b.HasOne("ManagerData.DataModels.PartDataModel", "MasterPart")
                        .WithMany("SubParts")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.PartDataModel", "SlavePart")
                        .WithOne("MainPart")
                        .HasForeignKey("ManagerData.DataModels.PartLink", "SlaveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MasterPart");

                    b.Navigation("SlavePart");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartMembersDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.MemberDataModel", "Member")
                        .WithOne("DepartmentEmployees")
                        .HasForeignKey("ManagerData.DataModels.PartMembersDataModel", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.PartDataModel", "Part")
                        .WithMany("PartMembers")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartTasksDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.PartDataModel", "Part")
                        .WithMany("PartTasks")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.TaskDataModel", "Task")
                        .WithOne("PartTasks")
                        .HasForeignKey("ManagerData.DataModels.PartTasksDataModel", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ManagerData.DataModels.MemberDataModel", b =>
                {
                    b.Navigation("DepartmentEmployees");

                    b.Navigation("EmployeeTasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartDataModel", b =>
                {
                    b.Navigation("MainPart");

                    b.Navigation("PartMembers");

                    b.Navigation("PartTasks");

                    b.Navigation("SubParts");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskDataModel", b =>
                {
                    b.Navigation("MemberTasks")
                        .IsRequired();

                    b.Navigation("PartTasks")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
