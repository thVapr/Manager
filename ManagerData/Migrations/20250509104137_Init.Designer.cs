// <auto-generated />
using System;
using ManagerData.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ManagerData.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250509104137_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ManagerData.DataModels.MemberDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(111)
                        .HasColumnType("character varying(111)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(111)
                        .HasColumnType("character varying(111)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(111)
                        .HasColumnType("character varying(111)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ManagerData.DataModels.MemberTag", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("MemberId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MemberTags");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MainPartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PartTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainPartId");

                    b.HasIndex("PartTypeId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartMemberDataModel", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Privileges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("MemberId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("PartMembers", (string)null);
                });

            modelBuilder.Entity("ManagerData.DataModels.PartMemberRole", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.HasKey("MemberId", "PartRoleId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("PartMemberRoles");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("PartRoles");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartTaskStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GlobalStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("PartRoleId");

                    b.ToTable("PartTaskStatuses");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PartTypes");
                });

            modelBuilder.Entity("ManagerData.DataModels.TagDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinationStatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("SourceStatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskMember", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<int>("ParticipationPurpose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("MemberId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskMembers", (string)null);
                });

            modelBuilder.Entity("ManagerData.DataModels.MemberTag", b =>
                {
                    b.HasOne("ManagerData.DataModels.MemberDataModel", "Member")
                        .WithMany("Tags")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.TagDataModel", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.PartDataModel", "MainPart")
                        .WithMany("Parts")
                        .HasForeignKey("MainPartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerData.DataModels.PartType", "PartType")
                        .WithMany("Parts")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainPart");

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartMemberDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.MemberDataModel", "Member")
                        .WithMany("PartLinks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.PartDataModel", "Part")
                        .WithMany("PartMembers")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartMemberRole", b =>
                {
                    b.HasOne("ManagerData.DataModels.MemberDataModel", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.PartDataModel", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartRole", b =>
                {
                    b.HasOne("ManagerData.DataModels.PartDataModel", "Part")
                        .WithMany("PartRoles")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartTaskStatus", b =>
                {
                    b.HasOne("ManagerData.DataModels.PartDataModel", "Part")
                        .WithMany("TaskStatuses")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.PartRole", "PartRole")
                        .WithMany()
                        .HasForeignKey("PartRoleId");

                    b.Navigation("Part");

                    b.Navigation("PartRole");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskDataModel", b =>
                {
                    b.HasOne("ManagerData.DataModels.PartDataModel", "CurrentPart")
                        .WithMany("Tasks")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurrentPart");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskHistory", b =>
                {
                    b.HasOne("ManagerData.DataModels.MemberDataModel", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.TaskDataModel", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskMember", b =>
                {
                    b.HasOne("ManagerData.DataModels.MemberDataModel", "Member")
                        .WithMany("MemberTasks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerData.DataModels.TaskDataModel", "Task")
                        .WithMany("TaskMembers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ManagerData.DataModels.MemberDataModel", b =>
                {
                    b.Navigation("MemberTasks");

                    b.Navigation("PartLinks");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartDataModel", b =>
                {
                    b.Navigation("PartMembers");

                    b.Navigation("PartRoles");

                    b.Navigation("Parts");

                    b.Navigation("TaskStatuses");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ManagerData.DataModels.PartType", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("ManagerData.DataModels.TaskDataModel", b =>
                {
                    b.Navigation("TaskMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
